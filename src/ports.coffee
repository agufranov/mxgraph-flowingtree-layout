window.initPorts = (graph) ->
  graph.setConnectable true
  # Disables automatic handling of ports. This disables the reset of the
  # respective style in mxGraph.cellConnected. Note that this feature may
  # be useful if floating and fixed connections are combined.
  graph.setPortsEnabled false
  # Enables rubberband selection
  new mxRubberband(graph)
  # Gets the default parent for inserting new cells. This
  # is normally the first child of the root (ie. layer 0).
  parent = graph.getDefaultParent()
  # Ports are equal for all shapes...
  ports = new Array
  # NOTE: Constraint is used later for orthogonal edge routing (currently ignored)
  ports['w'] =
    x: 0
    y: 0.5
    perimeter: true
    constraint: 'west'
  # ports['e'] = {x: 1, y: 0.5, perimeter: true, constraint: 'east'};
  # ports['n'] = {x: 0.5, y: 0, perimeter: true, constraint: 'north'};
  # ports['s'] = {x: 0.5, y: 1, perimeter: true, constraint: 'south'};
  # ports['nw'] = {x: 0, y: 0, perimeter: true, constraint: 'north west'};
  # ports['ne'] = {x: 1, y: 0, perimeter: true, constraint: 'north east'};
  # ports['sw'] = {x: 0, y: 1, perimeter: true, constraint: 'south west'};
  # ports['se'] = {x: 1, y: 1, perimeter: true, constraint: 'south east'};
  ports['fromParent'] =
    x: 0.1
    y: 1
    perimeter: true
    constraint: 'south'
  # Extends shapes classes to return their ports

  mxShape::getPorts = ->
    ports

  # Disables floating connections (only connections via ports allowed)

  graph.connectionHandler.isConnectableCell = (cell) ->
    false

  mxEdgeHandler::isConnectableCell = (cell) ->
    graph.connectionHandler.isConnectableCell cell

  # Disables existing port functionality

  graph.view.getTerminalPort = (state, terminal, source) ->
    terminal

  # Returns all possible ports for a given terminal

  graph.getAllConnectionConstraints = (terminal, source) ->
    `var ports`
    if terminal != null and terminal.shape != null and terminal.shape.stencil != null
      # for stencils with existing constraints...
      if terminal.shape.stencil != null
        return terminal.shape.stencil.constraints
    else if terminal != null and @model.isVertex(terminal.cell)
      if terminal.shape != null
        ports = terminal.shape.getPorts()
        cstrs = new Array
        for id of ports
          port = ports[id]
          cstr = new mxConnectionConstraint(new mxPoint(port.x, port.y), port.perimeter)
          cstr.id = id
          cstrs.push cstr
        return cstrs
    null

  # Sets the port for the given connection

  graph.setConnectionConstraint = (edge, terminal, source, constraint) ->
    if constraint
      key = if source then mxConstants.STYLE_SOURCE_PORT else mxConstants.STYLE_TARGET_PORT
      if constraint == null or constraint.id == null
        @setCellStyles key, null, [ edge ]
      else if constraint.id != null
        @setCellStyles key, constraint.id, [ edge ]
    return

  # Returns the port for the given connection

  graph.getConnectionConstraint = (edge, terminal, source) ->
    key = if source then mxConstants.STYLE_SOURCE_PORT else mxConstants.STYLE_TARGET_PORT
    id = edge.style[key]
    if id != null
      c = new mxConnectionConstraint(null, null)
      c.id = id
      return c
    null

  # Returns the actual point for a port by redirecting the constraint to the port
  graphGetConnectionPoint = graph.getConnectionPoint

  graph.getConnectionPoint = (vertex, constraint) ->
    if constraint.id != null and vertex != null and vertex.shape != null
      port = vertex.shape.getPorts()[constraint.id]
      if port != null
        constraint = new mxConnectionConstraint(new mxPoint(port.x, port.y), port.perimeter)
    graphGetConnectionPoint.apply this, arguments

  # Adds cells to the model in a single step
  graph.getModel().beginUpdate()
  try
    # var v1 = graph.insertVertex(parent, null, 'A', 20, 20, 100, 40);
    # var v2 = graph.insertVertex(parent, null, 'B', 80, 100, 100, 100,
    #     'shape=ellipse');
    # var v3 = graph.insertVertex(parent, null, 'C', 190, 30, 100, 60,
    #     'shape=triangle;perimeter=trianglePerimeter;direction=south');
    # var e1 = graph.insertEdge(parent, null, '', v1, v2, 'sourcePort=s;targetPort=nw');
    # var e2 = graph.insertEdge(parent, null, '', v1, v3, 'sourcePort=e;targetPort=out3');
  finally
    # Updates the display
    graph.getModel().endUpdate()
  return

# ---
# generated by js2coffee 2.0.4
